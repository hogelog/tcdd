#!/bin/bash

if [ "$1" == "init" ]; then
  echo "source \"$0\""
  exit
fi

cddfile=~/.cdd
cddtmp=~/.cdd.tmp
if tmux list-windows >/dev/null 2>&1; then
  current_window=$(tmux list-windows | while read line; do
    if [[ "$line" =~ ^([0-9]+):\ .+\* ]]; then
      echo "${BASH_REMATCH[1]}"
      break
    fi
  done)
fi

touch $cddfile

function cdd_cd() {
  IFS=$'\n' local windows=( $(cat $cddfile) )
  local target="$1"
  local window
  for window in "${windows[@]}"
  do
    if [[ "$window" =~ ^$target: ]]; then
      dir="${window#$target:}"
      break
    fi
  done
  echo "cd $dir"
  cd $dir
}

function cdd_list() {
  cat $cddfile
}

function cdd_add() {
  cdd_rec "$1" "$(pwd)"
  while IFS= read -r line; do
    [[ "$line" =~ ^$1: ]] && echo "$line"
  done < $cddfile
}

function cdd() {
  case "$1" in
    "list") cdd_list ;;
    "") cdd_list ;;
    "add") cdd_add "$2" ;;
    *) cdd_cd "$1" ;;
  esac
}

function cdd_rec() {
  local newline="$1:$2"
  local found=0
  > $cddtmp

  while IFS= read -r line; do
    if [[ "$line" =~ ^$1: ]]; then
      echo "$newline" >> $cddtmp
      found=1
    else
      echo "$line" >> $cddtmp
    fi
  done < $cddfile

  if [ $found -eq 0 ]; then
    echo "$newline" >> $cddtmp
  fi

  # Simple bubble sort for small files
  mapfile -t lines < $cddtmp
  local n=${#lines[@]}
  for ((i=0; i<n-1; i++)); do
    for ((j=0; j<n-i-1; j++)); do
      if [[ "${lines[j]}" > "${lines[j+1]}" ]]; then
        tmp="${lines[j]}"
        lines[j]="${lines[j+1]}"
        lines[j+1]="$tmp"
      fi
    done
  done

  printf '%s\n' "${lines[@]}" > $cddfile
  rm $cddtmp
}

TCDD_LAST_PWD=""

function tcdd_record_pwd() {
  if [ "x${current_window}" != "x" ] && [ "$PWD" != "$TCDD_LAST_PWD" ]; then
    cdd_rec "${current_window}" "$PWD"
    TCDD_LAST_PWD="$PWD"
  fi
}

# Use PROMPT_COMMAND to track directory changes
if [[ ! "$PROMPT_COMMAND" =~ tcdd_record_pwd ]]; then
  PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND;}tcdd_record_pwd"
fi

__cdd_init_completion()
{
  COMPREPLY=()
  _get_comp_words_by_ref cur prev words cword
}

function _cdd_bash() {
  local cur prev words cword split

  if declare -F _init_completion >/dev/null 2>&1; then
    _init_completion
  else
    __cdd_init_completion
  fi

  case $cword in
    1)
      COMPREPLY=( $(compgen -W "$(echo add && echo list && while IFS=: read -r key value; do echo "$key"; done < $cddfile)" -- "$cur") )
      ;;
  esac
}

if type complete >/dev/null; then
   complete -F _cdd_bash cdd
fi
